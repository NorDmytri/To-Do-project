@model Todo01._01vercion.Models.UserTask

@{
    ViewBag.Title = Resources.Resource.CreateTitle;
}

<style>
    /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
    #map {
        height: 400px;
        width: 100%;
    }

    #floating-panel {
        width: 40%;
        left: 25%;
        z-index: 5;
        background-color: #999;
        padding: 5px;
        border: 1px solid #999;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 100%;
        padding-left: 10px;
    }
</style>



<h2>@ViewBag.Title</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.TaskDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TaskDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TaskDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TaskTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TaskTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TaskTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TaskTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TaskTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TaskTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UseMap, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.UseMap)
                    @Html.ValidationMessageFor(model => model.UseMap, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MapPoin, htmlAttributes: new { @class = "control-label col-md-2" })
            
            <div class="col-md-10">
                @Html.EditorFor(model => model.MapPoin, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MapPoin, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Taskdescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Taskdescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Taskdescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Status, new SelectList(new[] { Resources.Resource.StatusPending, Resources.Resource.StatusAccomplished, Resources.Resource.StatusNotImplemented, Resources.Resource.StatusAbolished }), "", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>        
      

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@Resources.Resource.CreateBut" class="btn btn-default" />
            </div>
        </div>
    </div>

    <div style="border: 5px solid grey; width:40%; height:40%; ">
        <p style=" text-align: center;">@Resources.Resource.CreateMapTitle</p>
        <div id="map"></div>
        </div>
        <script>

            // In the following example, markers appear when the user clicks on the map.
            // The markers are stored in an array.
            // The user can then click an option to hide, show or delete the markers.
            var map;
            var markers = [];

            function initMap() {
                var haightAshbury = { lat: 50.4501, lng: 30.5234 };

                map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 8,
                    center: haightAshbury,
                    mapTypeId: 'terrain'
                });



                // This event listener will call addMarker() when the map is clicked.
                map.addListener('click', function (event) {
                    addMarker(event.latLng);
                });


                var infoWindow = new google.maps.InfoWindow({ map: map });

                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };

                        infoWindow.setPosition(pos);
                        infoWindow.setContent('Location found.');
                        map.setCenter(pos);
                    }, function () {
                        handleLocationError(true, infoWindow, map.getCenter());
                    });
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                }
            }

            // Adds a marker to the map and push to the array.
            function addMarker(location) {
                deleteMarkers();
                var mTitle = document.getElementById('MapPoin_MapTitle').value;
                var marker = new google.maps.Marker({
                    position: location,
                    animation: google.maps.Animation.DROP,
                    map: map,
                    title: mTitle

                });


                markers.push(marker);

                var v1 = location.lat();
                var v2 = location.lng();
 
                var e1 = document.getElementById('MapPoin_MapLat');
                var e2 = document.getElementById('MapPoin_Maplng');
                e1.value = v1;
                e2.value = v2;

            }

            // Sets the map on all markers in the array.
            function setMapOnAll(map) {
                for (var i = 0; i < markers.length; i++) {
                    markers[i].setMap(map);
                }
            }

            // Removes the markers from the map, but keeps them in the array.
            function clearMarkers() {
                setMapOnAll(null);
            }

            // Shows any markers currently in the array.
            function showMarkers() {
                setMapOnAll(map);
            }

            // Deletes all markers in the array by removing references to them.
            function deleteMarkers() {
                clearMarkers();
                markers = [];
                var n1 = document.getElementById('MapPoin_MapLat');
                var n2 = document.getElementById('MapPoin_Maplng');
                n1.value = "";
                n2.value = "";
            }

            // add function geolocation


        </script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCUX1NO7lpfr3Fi_7CrjClj70-GHzJq1Bg&callback=initMap" async defer></script>
    
    <div id="floating-panel">
        <input onclick="deleteMarkers();" type=button value="@Resources.Resource.CreateMapButDel">
    </div>



}
<div>
    @Html.ActionLink(Resources.Resource.BackToList, "Index")
</div>
